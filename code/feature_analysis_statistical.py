import os
import pandas as pd
import pickle
import scipy.stats as stats
import numpy as np
from data_handler import drop_rows
from scipy.stats import wilcoxon

path='../result/augment/'
def get_avrg_weight_cv(df):
    print(df.columns)
    feat=df.loc[0,'joint_features']
    result={'joint_feature':feat,'weight':[0.0]*len(feat),'s_feature':df.loc[0,'source_features'],'s_weight':[0.0]*len(df.loc[0,'source_features']),
            't_feature':df.loc[0,'target_features'],'t_weight':[0.0]*len(df.loc[0,'target_features'])}
    for idx,row in df.iterrows():
        for i,val in enumerate(row['joint_features_weight']):
            result['weight'][i]+=val
        for i,val in enumerate(row['source_features_weight']):
            result['s_weight'][i]+=val
        for i,val in enumerate(row['target_features_weight']):
            result['t_weight'][i]+=val
    for i,wt in enumerate(result['weight']):
        result['weight'][i]=result['weight'][i]/5.0
    for i,wt in enumerate(result['s_weight']):
        result['s_weight'][i]=result['s_weight'][i]/5.0
    for i, wt in enumerate(result['t_weight']):
        result['t_weight'][i] = result['t_weight'][i] / 5.0
    return pd.DataFrame(result)
def get_ttest(feat,a,b):
    # ttst={}
    welch=[]
    # for col in feat:
    #     ttst[col].append(stats.ttest_ind(a=a[col], b=b[col], equal_var=True))
    for i, col in enumerate(feat):
        if 'Unnamed' in col:
            continue
        # welch[col]=[]
        val=stats.ttest_ind(a=a[col], b=b[col], equal_var=False)
        welch.append(val.pvalue)


    return welch
# 'fms': array([0.72727273, 0.90909091, 0.8       , 0.6       , 0.8       ,
# #        1.        , 0.92307692, 0.66666667, 0.90909091, 0.33333333]):

# ), 'fms': array([0.28571429, 0.6       , 0.        , 0.44444444, 0.44444444,
#        0.90909091, 0.4       , 0.8       , 0.54545455, 0.25      ])
baseline_db_ccc={'acc': [0.75862069, 0.87931034, 0.74137931, 0.9137931 , 0.87719298], 'fms':[0.5625    , 0.82051282, 0.44444444, 0.88372093, 0.78787879]}
ccc_db_mult_ls={'acc': [0.71818182, 0.72477064, 0.85321101, 0.66972477, 0.77981651],
             'fms': [0.75590551, 0.76190476, 0.86885246, 0.69491525, 0.78947368]
}
ccc_db_baseline={'acc': [0.73636364, 0.70642202, 0.79816514, 0.64220183, 0.70642202],
 'fms': [0.768     , 0.74193548, 0.81355932, 0.66086957, 0.70909091]}
result_db_ccc_aug_lsa={'acc': 0.8607831677381647, 'fms': 0.7656200759426566}

result_db_ccc_base_ls={'acc': 0.8446460980036298, 'fms': 0.7296158307923013}
db_ccc_base_ls={'acc': [0.75862069, 0.81034483, 0.77586207, 0.93103448, 0.94736842],
                'fms': [0.58823529, 0.71794872, 0.51851852, 0.90909091, 0.91428571]}
result_ccc_adress_base_ls={'acc': 0.5936363636363635, 'fms': 0.46791486291486295}
ccc_adress_base_ls={'acc': [0.54545455, 0.63636364, 0.54545455, 0.54545455, 0.54545455,
       0.90909091, 0.45454545, 0.8       , 0.5       , 0.45454545],
 'fms': [0.28571429, 0.6       , 0.        , 0.44444444, 0.44444444,
       0.90909091, 0.4       , 0.8       , 0.54545455, 0.25      ]}
result_ccc_adress_aug_ls={'acc': 0.8054545454545454, 'fms': 0.7668531468531468}

###########################################

traget_db_ccc_svm_ls={'acc': [0.75862069, 0.77586207, 0.75862069, 0.84482759, 0.87719298],
 'fms': [0.53333333, 0.55172414, 0.5       , 0.75675676, 0.78787879]}
target_db_ccc_lr_ls={'acc': [0.82758621, 0.75862069, 0.75862069, 0.87931034, 0.94736842],
'fms': [0.6875    , 0.66666667, 0.5       , 0.84444444, 0.92307692]}



target_ccc_adress_svm_ls={'acc': [0.81818182, 0.63636364, 0.72727273, 0.54545455, 0.72727273,
       0.72727273, 0.90909091, 0.6       , 0.7       , 0.45454545], 'fms': [0.75      , 0.6       , 0.57142857, 0.28571429, 0.66666667,
       0.66666667, 0.90909091, 0.33333333, 0.57142857, 0.        ]}
target_ccc_adress_lr_ls={'acc': [0.81818182, 0.72727273, 0.90909091, 0.63636364, 0.81818182,
       1.        , 0.90909091, 0.6       , 0.9       , 0.63636364], 'fms': [0.8       , 0.76923077, 0.88888889, 0.66666667, 0.83333333,
       1.        , 0.92307692, 0.33333333, 0.90909091, 0.33333333]}
target_ccc_db_svm_ls={'acc': [0.66055046, 0.72477064, 0.55555556, 0.67592593, 0.71296296], 'fms': [0.60215054, 0.72222222, 0.41463415, 0.66019417, 0.65934066]}
target_ccc_db_lr_ls={'acc': [0.78899083, 0.67889908, 0.67592593, 0.77777778, 0.78703704],
                      'fms': [0.816     , 0.72440945, 0.69026549, 0.8       , 0.80991736]}
augment_ccc_db_svm={'l':{'acc': [0.75229358, 0.64220183, 0.67592593, 0.72222222, 0.74074074],
                      'fms': [0.78740157, 0.70676692, 0.7107438 , 0.75      , 0.78787879]},
                        'ls':{'acc': [0.77981651, 0.63302752, 0.66666667, 0.72222222, 0.73148148],
                       'fms': [0.8125    , 0.70588235, 0.70491803, 0.76190476, 0.78195489]},
                         'lsa':{'acc': [0.76146789, 0.64220183, 0.63888889, 0.74074074, 0.74074074],
 'fms': [0.79365079, 0.70676692, 0.68292683, 0.77777778, 0.78787879]}
                         }

augment_ccc_db_lr={'l':{'acc': [0.71559633, 0.68807339, 0.66666667, 0.76851852, 0.75      ],
                     'fms': [0.752     , 0.72580645, 0.66666667, 0.78632479, 0.7768595 ]},
                   'ls':{'acc': [0.78899083, 0.66055046, 0.67592593, 0.78703704, 0.75925926],
 'fms': [0.816     , 0.704     , 0.68468468, 0.80672269, 0.78333333]},
                   'lsa':{'acc': [0.76146789, 0.67889908, 0.65740741, 0.78703704, 0.76851852],
 'fms': [0.796875  , 0.72440945, 0.66666667, 0.8034188 , 0.78991597]}
}
# augment_ccc_db_svm_ls=
augment_ccc_db_lr_ls={'acc': [0.78899083, 0.66055046, 0.67592593, 0.78703704, 0.75925926],
 'fms': [0.816     , 0.704     , 0.68468468, 0.80672269, 0.78333333]}
# augment_ccc_db_svm_lsa=
augment_ccc_db_lr_lsa={'acc': [0.76146789, 0.67889908, 0.65740741, 0.78703704, 0.76851852],
 'fms': [0.796875  , 0.72440945, 0.66666667, 0.8034188 , 0.78991597]}
augment_ccc_adress_svm={'ls':{'acc': [0.72727273, 0.90909091, 0.81818182, 0.63636364, 0.81818182,
       1.        , 0.90909091, 0.7       , 0.9       , 0.63636364],
                   'fms': [0.72727273, 0.90909091, 0.8       , 0.6       , 0.8       ,
       1.        , 0.92307692, 0.66666667, 0.90909091, 0.33333333]},
                        'l':{'acc': [0.72727273, 0.90909091, 0.81818182, 0.63636364, 0.72727273,
       0.90909091, 0.81818182, 0.7       , 0.9       , 0.63636364], 'fms': [0.72727273, 0.90909091, 0.8       , 0.6       , 0.66666667,
       0.90909091, 0.85714286, 0.66666667, 0.90909091, 0.33333333]},
                        'lsa':{'acc': [0.81818182, 0.90909091, 0.90909091, 0.63636364, 0.90909091,
       1.        , 0.81818182, 0.6       , 0.9       , 0.54545455], 'fms': [0.83333333, 0.92307692, 0.90909091, 0.6       , 0.90909091,
       1.        , 0.85714286, 0.5       , 0.90909091, 0.28571429]}
}
augment_ccc_adress_lr={'ls':{'acc': [0.81818182, 0.72727273, 0.81818182, 0.54545455, 0.81818182,
       0.81818182, 0.81818182, 0.6       , 0.8       , 0.63636364], 'fms': [0.8       , 0.76923077, 0.8       , 0.44444444, 0.83333333,
       0.8       , 0.85714286, 0.33333333, 0.83333333, 0.33333333]},
                       'l':{'acc': [0.72727273, 0.72727273, 0.81818182, 0.54545455, 0.81818182,
       0.90909091, 0.90909091, 0.6       , 0.9       , 0.72727273], 'fms': [0.72727273, 0.76923077, 0.8       , 0.44444444, 0.83333333,
       0.90909091, 0.92307692, 0.33333333, 0.90909091, 0.57142857]},
                       'lsa':{'acc': [0.90909091, 0.63636364, 1.        , 0.45454545, 0.90909091,
       0.90909091, 0.72727273, 0.7       , 0.7       , 0.54545455],
 'fms': [0.90909091, 0.66666667, 1.        , 0.4       , 0.90909091,
       0.90909091, 0.8       , 0.66666667, 0.66666667, 0.        ]}

}
augment_ccc_adress_svm_l={'acc': [0.72727273, 0.90909091, 0.81818182, 0.63636364, 0.72727273,
       0.90909091, 0.81818182, 0.7       , 0.9       , 0.63636364], 'fms': [0.72727273, 0.90909091, 0.8       , 0.6       , 0.66666667,
       0.90909091, 0.85714286, 0.66666667, 0.90909091, 0.33333333]}
augment_ccc_adress_lr_l={'acc': [0.72727273, 0.72727273, 0.81818182, 0.54545455, 0.81818182,
       0.90909091, 0.90909091, 0.6       , 0.9       , 0.72727273], 'fms': [0.72727273, 0.76923077, 0.8       , 0.44444444, 0.83333333,
       0.90909091, 0.92307692, 0.33333333, 0.90909091, 0.57142857]}
augment_ccc_adress_svm_lsa={'acc': [0.81818182, 0.90909091, 0.90909091, 0.63636364, 0.90909091,
       1.        , 0.81818182, 0.6       , 0.9       , 0.54545455], 'fms': [0.83333333, 0.92307692, 0.90909091, 0.6       , 0.90909091,
       1.        , 0.85714286, 0.5       , 0.90909091, 0.28571429]}

augment_ccc_adress_lr_lsa={'acc': [0.90909091, 0.63636364, 1.        , 0.45454545, 0.90909091,
       0.90909091, 0.72727273, 0.7       , 0.7       , 0.54545455],
 'fms': [0.90909091, 0.66666667, 1.        , 0.4       , 0.90909091,
       0.90909091, 0.8       , 0.66666667, 0.66666667, 0.        ]}
augment_db_ccc_svm={'lsa':{'acc': [0.77966102, 0.93220339, 0.71186441, 0.93103448, 0.94915254],
                'fms': [0.64864865, 0.9047619 , 0.4516129 , 0.9       , 0.92307692]},
                    'l':{'acc': [0.79310345, 0.89655172, 0.74137931, 0.93103448, 0.92982456], 'fms': [0.68421053, 0.84210526, 0.48275862, 0.90909091, 0.88235294]},
                    'ls':{'acc': [0.81034483, 0.82758621, 0.74137931, 0.9137931 , 0.9122807 ],
                       'fms': [0.64516129, 0.75      , 0.48275862, 0.88888889, 0.86486486]}
}
augment_db_ccc_svm_l={'acc': [0.79310345, 0.89655172, 0.74137931, 0.93103448, 0.92982456], 'fms': [0.68421053, 0.84210526, 0.48275862, 0.90909091, 0.88235294]}
augment_db_ccc_svm_ls={'acc': [0.81034483, 0.82758621, 0.74137931, 0.9137931 , 0.9122807 ],
                       'fms': [0.64516129, 0.75      , 0.48275862, 0.88888889, 0.86486486]}
augment_db_ccc_lr={'l':{'acc': [0.84482759, 0.77586207, 0.77586207, 0.9137931 , 0.94736842],
                     'fms': [0.72727273, 0.68292683, 0.51851852, 0.88888889, 0.91891892]},
                   'ls':{'acc': [0.79310345, 0.77586207, 0.77586207, 0.9137931 , 0.94736842],
                      'fms': [0.625     , 0.68292683, 0.51851852, 0.88888889, 0.91891892]},
                   'lsa':{'acc': [0.83050847, 0.77966102, 0.69491525, 0.86206897, 0.84745763],
                       'fms': [0.73684211, 0.62857143, 0.4375    , 0.80952381, 0.7804878 ]}
}
augment_db_ccc_lr_ls={'acc': [0.79310345, 0.77586207, 0.77586207, 0.9137931 , 0.94736842],
                      'fms': [0.625     , 0.68292683, 0.51851852, 0.88888889, 0.91891892]}
augment_db_ccc_lr_lsa={'acc': [0.83050847, 0.77966102, 0.69491525, 0.86206897, 0.84745763],
                       'fms': [0.73684211, 0.62857143, 0.4375    , 0.80952381, 0.7804878 ]}

mult_ccc_db_lr={'l':{'acc': [0.77981651, 0.66055046, 0.64814815, 0.77777778, 0.75925926],
 'fms': [0.80952381, 0.704     , 0.65454545, 0.79661017, 0.78688525]},
                'ls':{'acc': [0.7706422 , 0.67889908, 0.65740741, 0.77777778, 0.75925926],
                   'fms': [0.80314961, 0.72440945, 0.67256637, 0.79661017, 0.78333333]}

}
mult_ccc_db_svm={'l':{'acc': [0.7706422 , 0.67889908, 0.63888889, 0.7037037 , 0.75      ],
 'fms': [0.80620155, 0.73684211, 0.67768595, 0.75384615, 0.80291971]},
                 'ls':{'acc': [0.7706422 , 0.67889908, 0.63888889, 0.7037037 , 0.75      ],
                    'fms': [0.80620155, 0.73684211, 0.67768595, 0.75384615, 0.80291971]}
}
mult_ccc_db_svm_ls={'acc': [0.7706422 , 0.67889908, 0.63888889, 0.7037037 , 0.75      ],
                    'fms': [0.80620155, 0.73684211, 0.67768595, 0.75384615, 0.80291971]}
mult_ccc_db_lr_ls={'acc': [0.7706422 , 0.67889908, 0.65740741, 0.77777778, 0.75925926],
                   'fms': [0.80314961, 0.72440945, 0.67256637, 0.79661017, 0.78333333]}
target_ccc_db_lr_ls={'acc': [0.78899083, 0.67889908, 0.67592593, 0.77777778, 0.78703704],
                      'fms': [0.816     , 0.72440945, 0.69026549, 0.8       , 0.80991736]}
mult_ccc_adress_lr={'l':{'acc': [0.90909091, 0.72727273, 0.81818182, 0.63636364, 0.81818182,
       1.        , 0.81818182, 0.6       , 0.9       , 0.63636364], 'fms': [0.90909091, 0.76923077, 0.8       , 0.6       , 0.83333333,
       1.        , 0.85714286, 0.33333333, 0.90909091, 0.33333333]},
'ls':{'acc': [0.81818182, 0.72727273, 0.90909091, 0.63636364, 0.81818182,
       0.90909091, 0.81818182, 0.6       , 0.9       , 0.45454545], 'fms': [0.83333333, 0.76923077, 0.88888889, 0.6       , 0.83333333,
       0.90909091, 0.85714286, 0.33333333, 0.90909091, 0.        ]}

}
mult_ccc_adress_svm={'l':{'acc': [0.72727273, 0.81818182, 0.90909091, 0.63636364, 1.        ,
       0.90909091, 0.81818182, 0.7       , 0.9       , 0.54545455], 'fms': [0.72727273, 0.85714286, 0.88888889, 0.6       , 1.        ,
       0.90909091, 0.85714286, 0.66666667, 0.90909091, 0.28571429]},
                     'ls':{'acc': [0.72727273, 0.81818182, 0.90909091, 0.63636364, 1.        ,
       0.90909091, 0.81818182, 0.6       , 1.        , 0.63636364], 'fms': [0.72727273, 0.85714286, 0.88888889, 0.6       , 1.        ,
       0.90909091, 0.85714286, 0.5       , 1.        , 0.33333333]}
}
mult_ccc_adress_lr_ls={'acc': [0.81818182, 0.72727273, 0.90909091, 0.63636364, 0.81818182,
       0.90909091, 0.81818182, 0.6       , 0.9       , 0.45454545], 'fms': [0.83333333, 0.76923077, 0.88888889, 0.6       , 0.83333333,
       0.90909091, 0.85714286, 0.33333333, 0.90909091, 0.        ]}

mult_ccc_adress_svm_ls={'acc': [0.72727273, 0.81818182, 0.90909091, 0.63636364, 1.        ,
       0.90909091, 0.81818182, 0.6       , 1.        , 0.63636364], 'fms': [0.72727273, 0.85714286, 0.88888889, 0.6       , 1.        ,
       0.90909091, 0.85714286, 0.5       , 1.        , 0.33333333]}
mult_db_ccc_lr={'ls':{'acc': [0.79310345, 0.77586207, 0.77586207, 0.9137931 , 0.94736842],
                   'fms': [0.625     , 0.68292683, 0.51851852, 0.88888889, 0.91891892]},
                'l':{'acc': [0.82758621, 0.79310345, 0.77586207, 0.9137931 , 0.92982456],
                  'fms': [0.6875    , 0.71428571, 0.51851852, 0.88888889, 0.88888889]}


}
mult_db_ccc_svm={'ls':{'acc': [0.81034483, 0.87931034, 0.75862069, 0.93103448, 0.94736842],
                    'fms': [0.64516129, 0.8       , 0.5       , 0.90909091, 0.91428571]},
'l':{'acc': [0.81034483, 0.87931034, 0.75862069, 0.93103448, 0.94736842],
                   'fms': [0.64516129, 0.8       , 0.5       , 0.90909091, 0.91428571]}

}
mult_db_ccc_lr={'l':{'acc': [0.82758621, 0.79310345, 0.77586207, 0.9137931 , 0.92982456],
                  'fms': [0.6875    , 0.71428571, 0.51851852, 0.88888889, 0.88888889]},

}
mult_db_ccc_svm_l={'acc': [0.81034483, 0.87931034, 0.75862069, 0.93103448, 0.94736842],
                   'fms': [0.64516129, 0.8       , 0.5       , 0.90909091, 0.91428571]}
boost_ccc_db_svm={'l':{'acc': [0.71559633, 0.63302752, 0.53703704, 0.64814815, 0.65740741],
                    'fms': [0.73043478, 0.68253968, 0.5       , 0.65454545, 0.68376068]},
                  'ls':{'acc': [0.70642202, 0.6146789 , 0.51851852, 0.64814815, 0.66666667],
                     'fms': [0.71929825, 0.6557377 , 0.49019608, 0.65454545, 0.69491525]},
'lsa':{'acc': [0.68807339, 0.59633028, 0.58333333, 0.63888889, 0.72222222],
                      'fms': [0.72580645, 0.62711864, 0.60176991, 0.64864865, 0.75409836]}


}
boost_ccc_db_lr={'l':{'acc': [0.625     , 0.54166667, 0.70833333, 0.79166667, 0.625     ],
 'fms': [0.66666667, 0.47619048, 0.77419355, 0.81481481, 0.68965517]},
                 'ls':{'acc': [0.66972477, 0.58715596, 0.51851852, 0.62962963, 0.60185185],
                    'fms': [0.7       , 0.66666667, 0.57377049, 0.62264151, 0.63247863]},
                 'lsa':{'acc': [0.62385321, 0.60550459, 0.53703704, 0.49074074, 0.5       ],
                     'fms': [0.65546218, 0.656     , 0.52830189, 0.47619048, 0.53448276]}

}
boost_ccc_db_lr_ls={'acc': [0.66972477, 0.58715596, 0.51851852, 0.62962963, 0.60185185],
                    'fms': [0.7       , 0.66666667, 0.57377049, 0.62264151, 0.63247863]}
boost_ccc_db_svm_ls={'acc': [0.70642202, 0.6146789 , 0.51851852, 0.64814815, 0.66666667],
                     'fms': [0.71929825, 0.6557377 , 0.49019608, 0.65454545, 0.69491525]}
boost_ccc_db_lr_lsa={'acc': [0.62385321, 0.60550459, 0.53703704, 0.49074074, 0.5       ],
                     'fms': [0.65546218, 0.656     , 0.52830189, 0.47619048, 0.53448276]}
boost_ccc_db_svm_lsa={'acc': [0.68807339, 0.59633028, 0.58333333, 0.63888889, 0.72222222],
                      'fms': [0.72580645, 0.62711864, 0.60176991, 0.64864865, 0.75409836]}

boost_db_ccc_lr={'l':{'acc':[0.77586207, 0.81034483, 0.72413793, 0.84482759, 0.85964912],
                   'fms': [0.62857143, 0.74418605, 0.46666667, 0.81632653, 0.8       ]},
'ls':{'acc': [0.77586207, 0.79310345, 0.70689655, 0.82758621, 0.84210526],
                    'fms': [0.60606061, 0.72727273, 0.4137931 , 0.79166667, 0.7804878 ]},
                 'lsa':{'acc': [0.81355932, 0.77966102, 0.66101695, 0.81034483, 0.83050847],
                     'fms': [0.7027027 , 0.64864865, 0.375     , 0.75555556, 0.77272727]}


}
boost_db_ccc_svm={'l':{'acc': [0.86206897, 0.81034483, 0.72413793, 0.9137931 , 0.92982456],
 'fms':[0.75      , 0.73170732, 0.42857143, 0.88888889, 0.88888889]},
                  'ls':{'acc': [0.82758621, 0.81034483, 0.74137931, 0.9137931 , 0.89473684],
                     'fms': [0.70588235, 0.73170732, 0.44444444, 0.88888889, 0.83333333]},
                  'lsa':{'acc': [0.81355932, 0.81355932, 0.71186441, 0.9137931 , 0.91525424],
                      'fms': [0.66666667, 0.74418605, 0.4137931 , 0.88372093, 0.87804878]}
}
boost_db_ccc_svm_ls={'acc': [0.82758621, 0.81034483, 0.74137931, 0.9137931 , 0.89473684],
                     'fms': [0.70588235, 0.73170732, 0.44444444, 0.88888889, 0.83333333]}
boost_db_ccc_lr_ls={'acc': [0.77586207, 0.79310345, 0.70689655, 0.82758621, 0.84210526],
                    'fms': [0.60606061, 0.72727273, 0.4137931 , 0.79166667, 0.7804878 ]}
boost_db_ccc_svm_lsa={'acc': [0.81355932, 0.81355932, 0.71186441, 0.9137931 , 0.91525424],
                      'fms': [0.66666667, 0.74418605, 0.4137931 , 0.88372093, 0.87804878]}
boost_db_ccc_lr_lsa={'acc': [0.81355932, 0.77966102, 0.66101695, 0.81034483, 0.83050847],
                     'fms': [0.7027027 , 0.64864865, 0.375     , 0.75555556, 0.77272727]}
boost_ccc_adress_lr={'l':{'acc': [0.63636364, 0.63636364, 0.81818182, 0.54545455, 0.90909091,
       0.81818182, 0.90909091, 0.5       , 0.8       , 0.63636364], 'fms': [0.6       , 0.66666667, 0.75      , 0.61538462, 0.92307692,
       0.8       , 0.92307692, 0.28571429, 0.83333333, 0.33333333]},
                     'ls':{'acc': [0.81818182, 0.72727273, 0.81818182, 0.63636364, 0.81818182,
       0.81818182, 1.        , 0.5       , 0.8       , 0.63636364], 'fms': [0.8       , 0.76923077, 0.75      , 0.66666667, 0.83333333,
       0.8       , 1.        , 0.28571429, 0.83333333, 0.33333333]},
                     'lsa':{'acc': [0.90909091, 0.63636364, 0.81818182, 0.54545455, 0.81818182,
       0.90909091, 0.81818182, 0.7       , 0.8       , 0.63636364], 'fms': [0.90909091, 0.6       , 0.75      , 0.61538462, 0.83333333,
       0.90909091, 0.85714286, 0.66666667, 0.83333333, 0.33333333]}
}
boost_ccc_adress_svm={'l':{'acc': [0.90909091, 0.81818182, 0.63636364, 0.63636364, 0.81818182,
       0.90909091, 0.72727273, 0.6       , 1.        , 0.63636364], 'fms': [0.88888889, 0.8       , 0.6       , 0.5       , 0.8       ,
       0.90909091, 0.76923077, 0.33333333, 1.        , 0.5       ]},
                      'ls':{'acc': [0.81818182, 0.72727273, 0.81818182, 0.63636364, 0.81818182,
       0.81818182, 1.        , 0.5       , 0.8       , 0.63636364],
                         'fms': [0.8       , 0.76923077, 0.75      , 0.66666667, 0.83333333,
       0.8       , 1.        , 0.28571429, 0.83333333, 0.33333333]},
                      'lsa':{'acc': [0.72727273, 0.72727273, 0.63636364, 0.63636364, 0.81818182,
       0.81818182, 0.72727273, 0.7       , 0.8       , 0.45454545],
                          'fms': [0.66666667, 0.72727273, 0.5       , 0.33333333, 0.8       ,
       0.8       , 0.76923077, 0.57142857, 0.8       , 0.25      ]}
}
boost_ccc_adress_lr_ls={'acc': [0.81818182, 0.72727273, 0.81818182, 0.63636364, 0.81818182,
       0.81818182, 1.        , 0.5       , 0.8       , 0.63636364], 'fms': [0.8       , 0.76923077, 0.75      , 0.66666667, 0.83333333,
       0.8       , 1.        , 0.28571429, 0.83333333, 0.33333333]}
boost_ccc_adress_svm_ls={'acc': [0.81818182, 0.72727273, 0.81818182, 0.63636364, 0.81818182,
       0.81818182, 1.        , 0.5       , 0.8       , 0.63636364],
                         'fms': [0.8       , 0.76923077, 0.75      , 0.66666667, 0.83333333,
       0.8       , 1.        , 0.28571429, 0.83333333, 0.33333333]}
boost_ccc_adress_lr_lsa={'acc': [0.90909091, 0.63636364, 0.81818182, 0.54545455, 0.81818182,
       0.90909091, 0.81818182, 0.7       , 0.8       , 0.63636364], 'fms': [0.90909091, 0.6       , 0.75      , 0.61538462, 0.83333333,
       0.90909091, 0.85714286, 0.66666667, 0.83333333, 0.33333333]}
boost_ccc_adress_svm_lsa={'acc': [0.72727273, 0.72727273, 0.63636364, 0.63636364, 0.81818182,
       0.81818182, 0.72727273, 0.7       , 0.8       , 0.45454545],
                          'fms': [0.66666667, 0.72727273, 0.5       , 0.33333333, 0.8       ,
       0.8       , 0.76923077, 0.57142857, 0.8       , 0.25      ]}
def paired_ttest(a,b,opt='greater'):
    # ttest=stats.ttest_rel(a['acc'], b['acc'],alternative=opt)
    ttest=stats.ttest_rel(a, b,alternative=opt) #paired student t test, parametric
    print(ttest)

    ttest = wilcoxon(a, b, zero_method='zsplit',alternative=opt)#wilcoxon, non parametric

    # ttest=stats.ttest_rel(a, b)


    # print('acc ttest')
    print(ttest)
    #
    # ttest=stats.ttest_rel(a['fms'], b['fms'],alternative='greater')
    # print('f1 ttest')
    # print(ttest)




def ttest_calc():
    pitt_ad=pd.read_csv(path+'pitt_ad.csv')
    pitt_ct=pd.read_csv(path+'pitt_ct.csv')
    ccc_ad = pd.read_csv(path + 'ccc_ad.csv')
    ccc_ct = pd.read_csv(path + 'ccc_ct.csv')
    df_ccc=pd.read_csv(path+"ccc_joint_lingsem_weight.csv")

    df_pitt=pd.read_csv(path+"pitt_joint_lingsem_weight.csv")

    # df_ccc=pd.read_csv(path+"avrg_joint_feature_weightsaugment_feat_[1, 1, 0]_lr_1.0nest_0_['ccc']_['pitt']_5.csv")
    # df_pitt=pd.read_csv(path+"avrg_joint_feature_weightsaugment_feat_[1, 1, 0]_svm_1.0nest_0_['pitt']_['ccc']_5.csv")
    feat=df_pitt['joint_feature'].values.tolist()
    pitt_welch,diff1,diff2,corr1,corr2=get_ttest(feat,pitt_ad,pitt_ct)
    # df_pitt['pvalue']=pitt_welch
    # df_pitt['diff']=diff
    # df_pitt['corr']=corr


    # pitt_ttest.to_csv(path+'pitt_ttest.csv')
    df_pitt.to_csv(path+'pitt_joint_welch_pval.csv')
    feat=df_ccc['joint_feature'].values.tolist()


    ccc_welch,diff1,diff2,corr1,corr2 = get_ttest(feat, ccc_ad, ccc_ct)
    # df_ccc['pvalue'] = ccc_welch
    # df_ccc['ad_ct_diff'] = diff
    # df_ccc['corr'] = corr
    # df_ccc['pvalue']=ccc_welch
    # # ccc_ttest = get_ttest(feat, ccc_ad, ccc_ct)
    #
    # # ccc_ttest.to_csv(path + 'ccc_welch.csv')
    # df_ccc.to_csv(path + 'ccc_joint_welch_pval.csv')



def feature_weight_calc():

    select=[
        "feature_weightsaugment_feat_[1, 1, 1]_lr_1.0nest_45_['pitt']_['ccc']_5_kNone.pickle",
            # "feature_weightsaugment_feat_[1, 1, 0]_lr_1.0nest_0_['ccc']_['pitt']_5.pickle"
    ]
    for (root, dirs, file) in os.walk(path):
        print('hi')
        for filename in file:
            if filename.endswith('.pickle') and select[0]==filename  :
                with open(path+filename, 'rb') as f:
                    df = pickle.load(f)
                # print()
                # df=pd.read_pickle(path+filename)
                # print(df)

                wgt=get_avrg_weight_cv(df)
                wgt.to_csv(path  + 'avrg_weight_pitt_ccc111.csv')
                wgt.to_pickle(path + 'avrg_weight_pitt_ccc111.pickle' )

def create_dataset_equal_bias(src_pos=54,src_ct=54):
    # print('ccc')
    # ccc=pd.read_csv('../data/demo_ccc.csv')
    # ccc=drop_rows('ccc',ccc)
    # ccc_pos=ccc[ccc['dignosis']==1]['id']
    # print(len((list(set(ccc_pos)))))
    # print(len((list(ccc_pos))))
    # ccc_ct = ccc[ccc['dignosis'] == 0]['id']
    # print(len((list(set(ccc_ct)))))
    # print(len((list(ccc_ct))))
    print('pitt')
    ccc=pd.read_csv('../data/linguistic_pitt.csv')
    demo= pd.read_csv('../data/demo_adress.csv')
    feat = pd.merge(ccc, demo, on=['filename'])


    feat=drop_rows('pitt',feat)
    feat=feat[feat['adress_train']==1]
    print(len(feat))


    utt=np.array(feat[feat['dem vs. ct']==1]['# tokens (participant)'])
    # utt=np.array(feat[feat['ncc']==0]['# tokens (participant)'])
    # print(utt)

    print(np.nanmean(utt))
    print(np.nanstd(utt))
    # ccc_pos=ccc[ccc['dem vs. ct']==1]['filename']
    # part_pos=[name.split('-')[0] for name in ccc_pos]
    # print(len((list(set(part_pos)))))
    # print(len((list(part_pos))))
    # ccc_ct = ccc[ccc['dem vs. ct'] == 0]['filename']
    # part_ct=[name.split('-')[0] for name in ccc_ct]
    #
    #
    # print(len((list(set(part_ct)))))
    # print(len((list(part_ct))))
target_db_ccc_svm_ls={'acc': [0.75862069, 0.77586207, 0.75862069, 0.84482759, 0.87719298],
                      'fms': [0.53333333, 0.55172414, 0.5       , 0.75675676, 0.78787879]}
from mlxtend.evaluate import mcnemar,mcnemar_table
adresstest_target= [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1]

adresstest={'true': [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1],
            'augment_pred':  [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1],
            'mult_pred':  [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0]
}

consistent_augment_lr={'aug':{'acc':
[0.7120000000000001, 0.664, 0.5930769230769231, 0.7200000000000001],
'f1':
[0.7990799468198848, 0.7277161365102215, 0.5651794871794873, 0.46165011459129107]}}
consistent_augment_svm={'aug':{'acc':
[0.584, 0.6000000000000001, 0.6326923076923077, 0.776]
,'f1':
[0.6786692003460637, 0.6445328864683703, 0.619187808693056, 0.5959706959706959]
                        }}
consistent_joint_lr={'acc':
[0.768, 0.6000000000000001, 0.5683589743589743, 0.68]
,'f1':
[0.8421367521367522, 0.6518829754123872, 0.5072256728778467, 0.3467032967032967]
                        }
consistent_joint_svm={'acc':
[0.632, 0.488, 0.5754102564102563, 0.7200000000000001]
,'f1':
[0.7353535353535353, 0.4059928477319782, 0.31880952380952376, 0.18888888888888888]
                        }
equal_joint_lr={'acc':
[0.66666667, 0.70833333, 0.45833333, 0.68      , 0.60869565]
,'f1':
[0.69230769, 0.66666667, 0.31578947, 0.66666667, 0.60869565]
                        }
equal_joint_svm={'acc':
[0.66666667, 0.58333333, 0.45833333, 0.68      ]
,'f1':
[0.7353535353535353, 0.4059928477319782, 0.31880952380952376, 0.18888888888888888]
                        }
equal_augment_lr={'aug':{'acc':
[0.70833333, 0.66666667, 0.58333333, 0.72      , 0.52173913],
'f1':
[0.74074074, 0.63636364, 0.5       , 0.72      , 0.56      ]
                  }}
equal_augment_svm={'aug':{'acc':
[0.79166667, 0.625     , 0.66666667, 0.64      ]
,'f1':
[0.8       , 0.57142857, 0.66666667, 0.64      ]}}
def mcnemar_test(y_test,a,b):
    print("McNemar's test")
    table = mcnemar_table(y_target=y_test, y_model1=a, y_model2=b)
    chi2_, p = mcnemar(ary=table, corrected=True)
    print(f"chi² statistic: {chi2_}, p-value: {p}\n")
#for adresstest exp.
# for k,v in adresstest.items():
#     print(k)
#     if 'true' in k:
#         continue
#     # opt='greater'
#     # print(np.array(adresstest['true']))
#     # print(np.array(adresstest[k]))
#     # print(np.array(adresstest_target))
#
#
#     mcnemar_test(np.array(adresstest['true']),np.array(adresstest[k]),np.array(adresstest_target))
# for cross validation exp.
print('equal_augment_svm')
for k,v in equal_augment_svm.items():
    print(k)
    for key,val in  equal_augment_svm[k].items():
        print(key)
        if np.mean(np.array(equal_augment_svm[k][key]))>np.mean(np.array(equal_joint_svm[key])):
            opt='greater'

        elif np.mean(np.array(equal_augment_svm[k][key]))<np.mean(np.array(equal_joint_svm[key])):
            opt='less'
        else:
            opt='two-sided'
        print(opt)
        paired_ttest(equal_augment_svm[k][key],equal_joint_svm[key],opt)


# feature_weight_calc()
# ttest_calc()
# print('ccc_db ')
# paired_ttest(ccc_db_mult_ls,ccc_db_baseline) #
# print('db_ccc')
# paired_ttest(db_ccc_aug_lsa,db_ccc_base_ls) #
# print('ccc_adress')
# paired_ttest(ccc_adress_aug_ls,ccc_adress_base_ls) #
# ccc_db
# acc ttest
# TtestResult(statistic=1.9816081488289043, pvalue=0.05929160348707547, df=4)
# f1 ttest
# TtestResult(statistic=2.265827862060642, pvalue=0.043061867908615284, df=4)
# db_ccc
# acc ttest
# TtestResult(statistic=0.5365765025241056, pvalue=0.3100063352357917, df=4)
# f1 ttest
# TtestResult(statistic=0.840453629136405, pvalue=0.22397861038657516, df=4)
# ccc_adress
# acc ttest
# TtestResult(statistic=4.1565192255814045, pvalue=0.0012302056617508185, df=9)
# f1 ttest
# TtestResult(statistic=3.5834918170978347, pvalue=0.002949233458350631, df=9)

# create_dataset_equal_bias()
# create_dataset_consistent_bias(source_pos=54,source_ct=46)
